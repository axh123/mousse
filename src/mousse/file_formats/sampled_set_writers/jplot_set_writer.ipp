// mousse: CFD toolbox
// Copyright (C) 2011-2012 OpenFOAM Foundation
// Copyright (C) 2016 mousse project

#include "jplot_set_writer.hpp"
#include "clock.hpp"
#include "coord_set.hpp"
#include "file_name.hpp"
#include "ofstream.hpp"


// Private Member Functions 
template<class Type>
mousse::Ostream& mousse::jplotSetWriter<Type>::writeHeader(Ostream& os) const
{
  return os
    << "# JPlot input file" << nl
    << "#" << nl << nl
    << "# Generated by sample on " << clock::date().c_str() << nl;
}


// Constructors 
template<class Type>
mousse::jplotSetWriter<Type>::jplotSetWriter()
:
  writer<Type>{}
{}


// Destructor 
template<class Type>
mousse::jplotSetWriter<Type>::~jplotSetWriter()
{}


// Member Functions 
template<class Type>
mousse::fileName mousse::jplotSetWriter<Type>::getFileName
(
  const coordSet& points,
  const wordList& valueSetNames
) const
{
  return this->getBaseName(points, valueSetNames) + ".dat";
}


template<class Type>
void mousse::jplotSetWriter<Type>::write
(
  const coordSet& points,
  const wordList& valueSetNames,
  const List<const Field<Type>*>& valueSets,
  Ostream& os
) const
{
  os << "# JPlot file" << nl << "# column 1: " << points.name() << nl;
  FOR_ALL(valueSets, i) {
    os  << "# column " << i + 2 << ": " << valueSetNames[i] << nl;
  }
  // Collect sets into columns
  List<const List<Type>*> columns{valueSets.size()};
  FOR_ALL(valueSets, i) {
    columns[i] = valueSets[i];
  }
  this->writeTable(points, columns, os);
}

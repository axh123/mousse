#!/bin/sh
# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
#
# Script
#   mousse-job
#
# Description
#     Run an mousse job in background.
#     Redirects the output to 'log' in the case directory.

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: ${0##*/} [OPTION] <application> ...
options:
  -case <dir>       specify alternative case directory, default is the cwd
  -parallel         parallel run of processors
  -screen           also sends output to screen
  -append           append to log file instead of overwriting it
  -wait             wait for execution to complete (when not using -screen)
  -version <ver>    specify an alternative mousse version
  -help             print the usage

* run an mousse job in background.
  Redirects the output to 'log' in the case directory

USAGE
    exit 1
}

# Echo strings that have single quotes
echo_args() {
    local add_space=""
    for string_item in "$@"; do
        echo -n "${add_space}"
        if [ "${string_item##* }" = "$string_item" ]
        then
            echo -n "$string_item"
            add_space=" "
        else
            echo -n "'$string_item'"
            add_space=" "
        fi
    done
    unset string_item add_space
}

unset version

# Replacement for possibly buggy 'which'
find_exec() {
    case "$1" in
    */*)
        if [ -x "$1" ]
        then
            echo "$1"
            return 0
        fi
        ;;
    esac

    old_IFS=$IFS
    IFS=':'
    for d in $PATH
    do
        # echo "testing: $d/$1" 1>&2
        if [ -x "$d/$1" -a ! -d "$d/$1" ]
        then
            # echo "Found exec: $d/$1" 1>&2
            IFS=$old_IFS
            echo "$d/$1"
            return 0
        fi
     done
     IFS=$old_IFS
     echo ""
     return 1
}

unset parallel_opt screen_opt wait_opt

# Parse options
while [ "$#" -gt 0 ]
do
   case "$1" in
   -h | -help | --help)
      usage
      ;;
   -case | --case)
      [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
      cd "$2" 2>/dev/null || usage "directory does not exist:  '$2'"
      shift 2
      ;;
   -p | -parallel | --parallel)
      parallel_opt=true
      shift
      ;;
   -s | -screen | --screen)
      screen_opt=true
      shift
      ;;
   -a | -append | --append)
      append_opt=true
      shift
      ;;
   -w | -wait | --wait)
      wait_opt=true
      shift
      ;;
   -v | -version | --version)
      [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
      version="$2"
      shift 2
      ;;
   --)
      shift
      break
      ;;
   -*)
      usage "invalid option '$1'"
      ;;
   *)
      break
      ;;
   esac
done

[ "$#" -ge 1 ] || usage "No application specified"

# Use mousse-exec for a specified version
# Also need mousse-exec for remote (parallel) runs
if [ -n "$version" -o "$parallel_opt" = true ]
then
    # When possible, determine if application even exists
    if [ -z "$version" ]
    then
        find_exec $1 >/dev/null || usage "Application '$1' not found"
    fi

    # Use foamExec for dispatching
    APPLICATION=$(find_exec mousse-exec) || usage "'mousse-exec' not found"

    [ -n "$version" ] && APPLICATION="$APPLICATION -version $version"

    # Attempt to preserve the installation directory 'MOUSSE_INST_DIR'
    if [ -d "$MOUSSE_INST_DIR" ]
    then
        APPLICATION="$APPLICATION -prefix $MOUSSE_INST_DIR"
    fi

else
    APPLICATION=$(find_exec $1) || usage "Application '$1' not found"
    echo "Application : $1"
    shift
fi


if [ "$parallel_opt" = true ]
then
    # Check if the case decomposed
    if [ -r "processor0" ]
    then
        NPROCS="$(/bin/ls -1d processor* | wc -l)"
    else
        echo "Case is not currently decomposed"
        if [ -r system/decomposeParDict ]
        then
            echo "system/decomposeParDict exists"
            echo "Try decomposing with \"mousse-job mousse-decompose-par\""
            exit 1
        else
            echo "Cannot find system/decomposeParDict file required to decompose the case for parallel running."
            echo "Please consult the User Guide for details of parallel running"
            exit 1
        fi
    fi

    # Find mpirun
    mpirun=$(find_exec mpirun) || usage "'mpirun' not found"
    mpiopts="-np $NPROCS"

    # Check if the machine ready to run parallel
    echo "Parallel processing using $WM_MPLIB with $NPROCS processors"
    case "$WM_MPLIB" in
    *OPENMPI)
        # add hostfile info
        for hostfile in \
            hostfile \
            machines \
            system/hostfile \
            system/machines \
            ;
        do
            if [ -r $hostfile ]
            then
                mpiopts="$mpiopts -hostfile $hostfile"
                break
            fi
        done

        # Send MOUSSE_SETTINGS to parallel processes, so that the proper
        # definitions are sent as well.
        mpiopts="$mpiopts -x MOUSSE_SETTINGS"

        ;;
    esac

    # Run (in parallel)
    if [ "$screen_opt" = true ]
    then
        [ "$append_opt" = true ] && tee_opts=" -a"
        echo "Executing: $mpirun $mpiopts $APPLICATION $(echo_args "$@") -parallel | tee $tee_opts log"
        $mpirun $mpiopts $APPLICATION "$@" -parallel | tee $tee_opts log
    else
        if [ "$append_opt" = true ]
        then
            echo "Executing: $mpirun $mpiopts $APPLICATION $(echo_args "$@") -parallel >> log 2>&1"
            $mpirun $mpiopts $APPLICATION "$@" -parallel >> log 2>&1 &
        else
            echo "Executing: $mpirun $mpiopts $APPLICATION $(echo_args "$@") -parallel > log 2>&1"
            $mpirun $mpiopts $APPLICATION "$@" -parallel > log 2>&1 &
        fi

        pid=$!
        if [ "$wait_opt" = true ]
        then
            wait $pid
        fi
    fi
else
	# Check if we are on El Capitan
	if test "$(uname -s)" = "Darwin" && \
		{ test "$(uname -r | cut -d. -f1)" -eq 15; }
	then
		APPLICATION="mousse-exec $APPLICATION"
	fi
    # Run (on single processor)
    if [ "$screen_opt" = true ]
    then
        [ "$append_opt" = true ] && tee_opts=" -a"
        echo "Executing: $APPLICATION $(echo_args "$@") | tee $tee_opts log &"
        $APPLICATION "$@" | tee $tee_opts log &
        wait $!
    else
        if [ "$append_opt" = true ]
        then
            echo "Executing: $APPLICATION $(echo_args "$@") >> log 2>&1 &"
            $APPLICATION "$@" >> log 2>&1 &
        else
            echo "Executing: $APPLICATION $(echo_args "$@") > log 2>&1 &"
            $APPLICATION "$@" > log 2>&1 &
        fi

        pid=$!
        if [ "$wait_opt" = true ]
        then
            wait $pid
        fi
    fi
fi

# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
# File
#     wmake/scripts/allwmake-parse-arguments
#
# Description
#     allwmake argument parser
#
# Usage
#     # Declare the targetType and set to default for library building
#     target_type=libso      # lib, libo or libso
#
#     # Declare genDoc and set to default if documentation building is supported
#     gen_doc=0              # 0 or 1
#
#     # Parse the arguments by sourcing this script
#     . $WM_PROJECT_DIR/wmake/scripts/allwmake-parse-arguments

Script=${0##*/}

usage() {
	exec 1>&2
	while [ "$#" -ge 1 ]; do echo "$1"; shift; done

	# Print normal usage options
	cat <<- USAGE

	Usage: $Script [OPTIONS]

	options:
	  -h or -help       Print list of Allwmake options
	  -k or -non-stop   Compile without stopping when errors occur
	  -j                Compile using all local cores/hyperthreads
	  -jN or -j N       Compile using N cores/hyperthreads
	  -no-scheduler     Compile without wmakeScheduler
	USAGE

	# Print options for building code documentation
	test -n "$genDoc" && cat <<- USAGE_DOC
	doc               Compile code documentation (requires Doxygen)
	USAGE_DOC

	# Print options for building libraries
	test -n "$targetType" && cat <<- USAGE_LIB
	  lib               Compile statically linked archive lib (.a)
	  libo              Compile statically linked lib (.o)
	  libso             Compile dynamically linked lib (.so)
	  dep               Compile dependency files
	USAGE_LIB
	exit 1
}

# Set WM_NCOMPPROCS to number of cores on local machine
set_wm_ncompprocs()
{
	if [ -r /proc/cpuinfo ]
	then
		WM_NCOMPPROCS=$(egrep "^processor" /proc/cpuinfo | wc -l)
	elif [ -x /usr/sbin/sysctl ]
	then
		WM_NCOMPPROCS=$(/usr/sbin/sysctl -n hw.ncpu)
	else
		WM_NCOMPPROCS=1
	fi

	export WM_NCOMPPROCS
}


# Parse the arguments and options
while [ "$#" -gt 0 ]
do
	case "$1" in
	-h | -help | --help)
		# Print help
		usage
		;;
	-j)
		# Parallel compilation on all cores of local machine
		set_wm_ncompprocs
		test $# -ge 2 && expr $2 + 1 > /dev/null 2>&1 \
			&& shift && export WM_NCOMPPROCS=$1
		echo "Compiling enabled on $WM_NCOMPPROCS cores"
		;;
	-j*)
		# Parallel compilation on specified number of cores
		export WM_NCOMPPROCS=${1#-j}
		echo "Compiling enabled on $WM_NCOMPPROCS cores"
		;;
	-k | -non-stop)
		# Non-stop compilation, ignoring errors
		export WM_CONTINUE_ON_ERROR=1
		;;
	-no-scheduler)
		# Disable scheduled parallel compilation
		unset WM_SCHEDULER
		;;
	doc)
		# Generate documentation
		test -n "$genDoc" || usage "invalid option '$1'"
		gen_doc=1
		;;
	lib | libo | libso | dep)
		# Specify target type
		test -n "$target_type" || usage "invalid option '$1'"
		target_type=$1
		;;
	--)
		shift
		break
		;;
	-* | *)
		usage "invalid option '$1'"
		;;
	esac
	shift
done


# If WM_CONTINUE_ON_ERROR not set activate the shell option "stop on error"
if [ -z "${WM_CONTINUE_ON_ERROR}" ]
then
	set -e
fi

# Cleanup local variables and functions
unset Script usage set_wm_ncompprocs

# vim: set ft=sh noet sw=2 ts=2 sts=2:

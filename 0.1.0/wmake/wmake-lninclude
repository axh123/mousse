#!/bin/sh
# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
# 
# Script
#     wmake-lninclude
#
# Description
#     Link all the source files in the <dir> directory into <dir>/lninclude
#
#     Usage: wmake-lninclude [-f] <dir>
#
#     The desired source files:
#         *.C *.H *.h *.cpp *.cxx *.hpp *.hxx
#
#     Avoid
#         *.c (C source)
#         .#* (cvs recovered files)

Script=${0##*/}

usage() {
	exec 1>&2
	while [ "$#" -ge 1 ]; do echo "$1"; shift; done
	cat <<- USAGE

	Usage: $Script [OPTION] dir

	options:
	  -f | -force       force update
	  -s | -silent      use 'silent' mode (do not echo command)
	  -help             print the usage

	Link all the source files in the <dir> into <dir>/lnInclude

	Note
	  The '-f' option forces an update when the lnInclude directory already exists
	  and changes the default linking from 'ln -s' to 'ln -sf'.

	USAGE
	exit 1
}


# Parse arguments and options

# Default 'find' option
unset find_opt

# Default 'ln' option
ln_opt="-s"

unset force_update silent_opt

while [ "$#" -gt 0 ]
do
	case "$1" in
	-h | -help | --help)   # provide immediate help
		usage
		;;
	-f | -force | --force)
		force_update=true
		ln_opt="-sf"
		shift
		;;
	-s | -silent | --silent)
		silent_opt=true
		shift
		;;
	-*)
		usage "unknown option: '$*'"
		;;
	*)
		break
		;;
	esac
done

if [ $# -eq 1 ]
then
	base_dir=$1
else
	usage "Error: incorrect number of arguments"
fi

# Convert incorrect path/dir/_lninclude to something sensible
while [ "${base_dir##*/}" = _lninclude ]
do
	base_dir="${base_dir%/*}"
	if [ "$base_dir" = _lninclude ]
	then
		base_dir="."
	fi
done
inc_dir=$base_dir/_lninclude


[ -d $base_dir ] || {
echo "$Script error: base directory $base_dir does not exist" 1>&2
exit 2
}

if [ -d $inc_dir ]
then
	[ "$force_update" = true ] || {
	# echo "$Script error: include directory $incDir already exists" 1>&2
	exit 0
	}
else
	mkdir $inc_dir
fi

[ -d $inc_dir ] || {
echo "$Script error: failed to create include directory $inc_dir" 1>&2
exit 0
}

cd $inc_dir || exit 1

if [ "$silent_opt" != true ]
then
	if [ -n "$WM_SILENT_RULES" ]
	then
		echo "  [LN] $inc_dir" 1>&2
	else
		echo "$Script: linking include files to $inc_dir" 1>&2
	fi
fi

# Remove any broken links first (this helps when file locations have moved)
find -L . -type l -exec rm {} \;


# Create links, avoid recreating links unless necessary
# things placed in the 'noLink' directory are skipped
find .. $find_opt \
	\( -name _lninclude -o -name _make -o -name config -o -name noLink \) \
	-prune \
	-o \( \
	-name '*.[CHh]' \
	-o -name '*.[ch]xx' \
	-o -name '*.[ch]pp' \
	-o -name '*.inc' \
	-o -name '*.type' \
	\)  \
	-exec ln $ln_opt {} . \;


# Cleanup local variables and functions
unset Script usage

# vim: set ft=sh noet sw=4 ts=4 sts=4:

#!/bin/sh
# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
# 
# Script
#   wmake
# Description
#   General, easy to use make system for multi-platform development
#   with support for local and network parallel compilation.
#
#   This updated wmake supports out-of-tree object and dependency files to
#   avoid the clutter which accumulates in the source-tree with the original
#   wmake system.  Now when building the mousse package both the object and
#   dependency files are now located in a tree with the same structure as the
#   source tree but in the platforms/$WM_OPTIONS sub-directory of
#   $WM_PROJECT_DIR.
#
#   When building user libraries and applications which are not located in the
#   mousse source-tree the object and dependency files are located in a tree
#   with the same structure as the source tree but in the Make/$WM_OPTIONS
#   sub-directory.
#
#   The disadvantage of the out-of-tree compilation is that the dependency
#   files are harder to find but are sometimes useful to study which header
#   files are included.  For those who need access to the dependency files the
#   new wdep script is provided to locate them.  See the wdep script header or
#   run:
#     wdep -h
# See also
#   wmake-lninclude, wmake-lninclude-all, wdep, wrmdep, wrmo and wrmdepold,
#   wclean, wclean-machine, wclean-all, wclean-lninclude-all

Script=${0##*/}

usage() {
	exec 1>&2
	while [ "$#" -ge 1 ]; do echo "$1"; shift; done
	cat<<-USAGE

	Usage: $Script [OPTION] [dir]
	       $Script [OPTION] target [dir [MakeDir]]

	options:
	  -s | -silent      Run make in 'silent' mode (do not echo commands)
	  -a | -all         Run wmake in all subdirectories
	  -h | -help        Print the usage

	  A general, easy-to-use make system for multi-platform development
	  with support for local and network parallel compilation.

	The 'target' is a Makefile target:
	  e.g., platforms/linux64GccDPOpt/.../fvMesh.o

	or a special target:
	  all               wmake all subdirectories, running Allwmake files if present
	  exe               Compile statically linked executable
	  lib               Compile statically linked archive lib (.a)
	  libo              Compile statically linked lib (.o)
	  libso             Compile dynamically linked lib (.so)
	  dep               Compile lnInclude and dependencies only

	USAGE
	exit 1
}


# Default make is the "make" in the path
make="make"


# Parse arguments and options
# Default to compiling the local target only
all=

while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help | --help)
        usage
        ;;
    -s | -silent | --silent)
        make="$make -s"
        shift
        ;;
    -a | -all | all | --all)
        all="all"
        shift
        ;;
    -*)
        usage "unknown option: '$*'"
        ;;
    *)
        break
        ;;
    esac
done


# Check environment variables
for envar in WM_OPTIONS WM_LINK_LANGUAGE WM_DIR
do
    eval test "\$$envar" || {
        echo "$Script error: environment variable \$$envar not set" 1>&2
        exit 1
    }
done


# When compiling anything but a standalone exe WM_PROJECT and WM_PROJECT_DIR
# must be set
[ "$1" = exe -o \( "$WM_PROJECT" -a "$WM_PROJECT_DIR" \) ] || {
    echo "$Script error:" 1>&2
    echo "    environment variable \$WM_PROJECT or " \
         "\$WM_PROJECT_DIR not set" 1>&2
    echo "    while building project library" 1>&2
    exit 1
}


# Setup parallel compilation
# Set WM_NCOMPPROCS automatically when both WM_HOSTS and WM_SCHEDULER are set
if [ -z "$WM_NCOMPPROCS" -a -n "$WM_HOSTS" -a -n "$WM_SCHEDULER" ]
then
    WM_NCOMPPROCS=$(wmake-scheduler -count)
    [ $? -eq 0 ] || unset WM_NCOMPPROCS
fi

if [ "$WM_NCOMPPROCS" ]
then
    if [ "$WM_NCOMPPROCS" -gt 1 -a ! "$MAKEFLAGS" ]
    then
        lock_dir=$HOME/.$WM_PROJECT/.wmake

        if [ -d $lock_dir ]
        then
            rm -f $lock_dir/*
        else
            mkdir -p $lock_dir
        fi

        make="$make --no-print-directory -j "$WM_NCOMPPROCS
    fi
fi


# Check arguments and change to the directory in which to run wmake

unset dir target_type
make_dir=_make

if [ $# -ge 1 ]
then
    if [ -d "$1" ]
    then
        dir=$1
    else
        target_type=$1
    fi

    # Specified directory name:
    [ $# -ge 2 ] && dir=$2

    # Specified alternative name for the Make sub-directory:
    [ $# -ge 3 ] && make_dir=$3

    if [ "$dir" ]
    then
        cd $dir 2>/dev/null || {
            echo "$Script error: could not change to directory '$dir'" 1>&2
            exit 1
        }
    fi
fi


# Recurse the source tree to compile "all" targets
if [ "$all" = "all" ]
then
    if [ -e Allwmake ]
    then
        ./Allwmake
        exit $?
    else
        # Find all the sub-directories containing a '_make' directory
        MOUSSE_APPS=$(\
                       for d in *; \
					   do [ -d "$d" -a "$d" != Optional -a "$d" != _make ] \
                          && echo "$d"; \
                       done | xargs \
                 )
        if [ ! "$MOUSSE_APPS" = "" ]
        then
            # Compile all applications in sub-directories
            $make ${WM_CONTINUE_ON_ERROR:+-k} \
                  -f $WM_DIR/makefile_apps \
                  TARGET="$target_type" MOUSSE_APPS="$MOUSSE_APPS"
        fi
        # If the current directory contains a 'Make' directory continue
        # otherwise exit
        if [ ! -d $make_dir ]
        then
            exit $?
        fi
    fi
fi


# Search up the directory tree for the Make sub-directory,
# check the existance of the 'files' file and build there if present
unset dir

expand_path()
{
    dir=$(dirname $1)
    cwd=$PWD
    cd $dir
    ex_path=$PWD
    cd $cwd
}

find_target()
{
    expand_path $1

    if [ "$ex_path" = "$WM_PROJECT_DIR" \
                   -o "$ex_path" = "$HOME" \
                   -o "$ex_path" = "/" \
       ]
    then
        echo "$Script error: could not find Make directory" 1>&2
    elif [ -d "$1/_make" ]; then
        echo "    Found target directory " $1
        dir=$1
    else
        find_target "$1/.."
    fi
}

if [ ! -d $make_dir ]
then
    echo "$Script: '$make_dir' directory does not exist in $PWD" 1>&2
    echo "    Searching up directories tree for Make directory"

    find_target .
    target_type=

    if [ "$dir" ]
    then
        cd $dir 2>/dev/null || {
            echo "$Script error: could not change to directory '$dir'" 1>&2
            exit 1
        }
    fi
fi


[ -r $make_dir/files ] || {
    echo "$Script error: file '$make_dir/files' does not exist in $PWD" 1>&2
    exit 1
}


# Transform options
# Transform no option to "libso" if that looks appropriate or remove it
# so that the call to make builds the application
if [ "$target_type" = "" ]
then
    unset target_type
    if grep -e '^ *LIB *=' "$make_dir/files" >/dev/null 2>&1
    then
        target_type=libso
    fi
fi

# Spawn a sub-shell and unset MAKEFLAGS in that sub-shell to avoid
# files and options being built in parallel

objects_dir=$make_dir/$WM_OPTIONS
if echo $PWD | grep "$WM_PROJECT_DIR"
then
    platform_path=$WM_PROJECT_DIR/platforms/${WM_OPTIONS}
    objects_dir=$platform_path$(echo $PWD | sed s%$WM_PROJECT_DIR%% )
fi

(
    unset MAKEFLAGS
    mkdir -p $objects_dir

    # Pre-build the $WM_OPTIONS/options file
    # which is included when building the $WM_OPTIONS/files file
    $make -s -f $WM_DIR/makefile_files MAKE_DIR=$make_dir OBJECTS_DIR=$objects_dir\
          $objects_dir/options

    $make -s -f $WM_DIR/makefile_files MAKE_DIR=$make_dir OBJECTS_DIR=$objects_dir
)


# Check the $objects_dir/source_files file was created successfully

[ -r $objects_dir/source_files ] || {
    echo "$Script error: file '$objects_dir/source_files'" \
         "could not be created in $PWD" 1>&2
    exit 1
}

# Make the dependency files

# For libraries create lninclude ...
case "$target_type" in
    lib | libo | libso | dep )
        # ... but only if 'LIB' is declared in '_make/files'
        if grep -e '^ *LIB *=' "$make_dir/files" >/dev/null 2>&1
        then
            $make -s -f $WM_DIR/makefile MAKE_DIR=$make_dir \
                  OBJECTS_DIR=$objects_dir _lninclude
        fi
        ;;
esac

# Make the dependency files or object files and link
exec $make -f $WM_DIR/makefile MAKE_DIR=$make_dir OBJECTS_DIR=$objects_dir \
     $target_type

# Cleanup local variables and functions
unset Script usage expand_path find_target

# vim: set ft=sh noet sw=2 ts=2 sts=2:

#!/bin/sh
# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
# 
# Script
#     wmake-print-build
#
# Description
#     Print the version used when building the project

Script=${0##*/}

usage() {
	exec 1>&2

	while [ "$#" -ge 1 ]; do echo "$1"; shift; done
	cat <<- USAGE
	Usage: $Script [OPTION]
	options:
	  -check          check the git head commit vs. \$WM_PROJECT_DIR/.build
                      (exit code 0 for no changes)
	  -major          report \$WM_PROJECT_VERSION only and exit
	  -update         update \$WM_PROJECT_DIR/.build from the git information
	  -pkg TAG        specify packager/release tag ('none' marks an empty packager)
	  -short          report short version information (ie, without pkg tag)
	  -version VER    specify an alternative version

	Print the version used when building the project, in this order of precedence:
	  * the git head commit (prefixed with \$WM_PROJECT_VERSION)
	  * \$WM_PROJECT_DIR/.build
	  * \$WM_PROJECT_VERSION

	USAGE
	exit 1
}


# Parse arguments and options
unset check_only update package version short_opt

while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help | --help)
        usage
        ;;
    -c | -check | --check)
        check_only=true
        shift
        ;;
    -major | --major)
        echo ${WM_PROJECT_VERSION:-unknown}
        exit 0
        ;;
    -u | -update | --update)
        update=true
        shift
        ;;
    -pkg | -package | --package)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        # Mark empty as 'none', disallow '!' in string
        package=$(echo "${2:-none}" | sed -e 's/!//g')
        shift 2
        ;;
    -short | --short)
        short_opt=true
        shift
        ;;
    -v | -version | --version)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        version="$2"
        shift 2
        ;;
    *)
        usage "unknown option/argument: '$*'"
        ;;
    esac
done

# Persistent build tag
build="$WM_PROJECT_DIR/.build"

# Retrieve old values from the $WM_PROJECT_DIR/.build cache, stored as
#     version [packager]
unset old_package old_version
get_old_values()
{
    set -- $(tail -1 $build 2>/dev/null)
    old_version="$1"
    [ "$#" -gt 0 ] && shift
    old_package="$@"
    [ "${old_package:-none}" = none ] && unset old_package
}

# printTag - output the build tag, reuses the old -package tag if needed
print_tag()
{
    if [ "${package:-${old_package:-none}}" = none ]
    then
        echo "$version"
    else
        echo "$version ${package:-$old_package}"
    fi
}

# Get the version
if [ -n "$version" ]
then
    # Specified a version - no error possible
    rc=0
else
    # Get the head SHA1 when building under git
    # if there are multiple values (eg, HEAD, origin/HEAD, ...)
    # only take the first one, which is 'HEAD'
    version=$(
        cd $WM_PROJECT_DIR 2>/dev/null && \
        git show-ref --hash=12 --head HEAD 2>/dev/null | head -1
    )

    if [ -n "$version" ]
    then
        # Mark as success and prefix with WM_PROJECT_VERSION
        rc=0
        version="${WM_PROJECT_VERSION}-$version"
    else
        # Mark as failure
        rc=1
    fi
fi

# Retrieve old values
get_old_values

if [ "$short_opt" = true ]
then
    unset package old_package
fi

# Update persistent build tag if possible
if [ $rc -eq 0 -a -n "$update" ]
then
    [ "$version:$package" = "$old_version:$old_package" ] || {
	[ -w "$build" -o \( -w "$WM_PROJECT_DIR" -a ! -e "$build" \) ] && {
	printTag >| "$build" 2>/dev/null
	}
	}
fi


# Check git vs. persistent build tag
if [ -n "$check_only" ]
then
    if [ $rc -eq 0 ]
    then
        test "$version:${package:-$old_package}" = "$old_version:$old_package"
        rc=$?
        if [ $rc -eq 0 ]
        then
            echo "same version as previous build" 1>&2
        else
            echo "version changed from previous build" 1>&2
        fi
    else
        echo "no git description found" 1>&2
    fi
    exit $rc
fi

# Cannot get git information or  -version version
if [ $rc -ne 0 ]
then
    if [ -n "$old_version" ]
    then
        # Use previous version info
        version="$old_version"
    else
        # Fallback to WM_PROJECT_VERSION alone
        version="${WM_PROJECT_VERSION:-unknown}"
    fi
fi

# Output the tag
print_tag

# vim: set ft=sh noet sw=4 ts=4 sts=4:

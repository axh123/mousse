#ifndef UTILITIES_MESH_GENERATION_FOAMY_MESH_FOAMY_QUAD_MESH_SHORT_EDGE_FILTER_2D_HPP_
#define UTILITIES_MESH_GENERATION_FOAMY_MESH_FOAMY_QUAD_MESH_SHORT_EDGE_FILTER_2D_HPP_

// mousse: CFD toolbox
// Copyright (C) 2013-2015 OpenFOAM Foundation
// Copyright (C) 2016 mousse project
//
// Class
//   mousse::shortEdgeFilter2D
// Description
//   This class filters short edges generated by the CV2D mesher.
// SourceFiles
//   short_edge_filter_2d.cpp

#include "meshed_surfaces.hpp"
#include "cv_2d.hpp"
namespace mousse
{
class shortEdgeFilter2D
{
  // Private data
    const CV2D& cv2Dmesh_;
    MeshedSurface<face> ms_;
    const scalar shortEdgeFilterFactor_;
    const scalar edgeAttachedToBoundaryFactor_;
    wordList patchNames_;
    labelList patchSizes_;
    EdgeMap<label> mapEdgesRegion_;
    EdgeMap<label> indirectPatchEdge_;
  // Private Member Functions
    void addRegion
    (
      const label regionI,
      DynamicList<label>& bPointRegions
    ) const;
    void assignBoundaryPointRegions
    (
      List<DynamicList<label> >& boundaryPointRegions
    ) const;
    void updateEdgeRegionMap
    (
      const MeshedSurface<face>& surfMesh,
      const List<DynamicList<label> >& boundaryPtRegions,
      const labelList& surfPtToBoundaryPt,
      EdgeMap<label>& mapEdgesRegion,
      labelList& patchSizes
    ) const;
    //- Disallow default bitwise copy construct
    shortEdgeFilter2D(const shortEdgeFilter2D&);
    //- Disallow default bitwise assignment
    void operator=(const shortEdgeFilter2D&);
public:
  //- Runtime type information
  CLASS_NAME("shortEdgeFilter2D");
  // Constructors
    shortEdgeFilter2D(const CV2D& cv2Dmesh, const dictionary& dict);
  //- Destructor
  ~shortEdgeFilter2D();
  // Access Functions
    const wordList& patchNames() const
    {
      return patchNames_;
    }
    const labelList& patchSizes() const
    {
      return patchSizes_;
    }
    const EdgeMap<label>& mapEdgesRegion() const
    {
      return mapEdgesRegion_;
    }
    const MeshedSurface<face>& fMesh() const
    {
      return ms_;
    }
  // Member Functions
    void filter();
    void writeInfo(Ostream& os);
};
}  // namespace mousse
#endif

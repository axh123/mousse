// mousse: CFD toolbox
// Copyright (C) 2014-2015 OpenFOAM Foundation
// Copyright (C) 2016 mousse project
// Class
//   mousse::RASModels::buoyantKEpsilon
// Group
//   grpRASTurbulence
// Description
//   Additional buoyancy generation/dissipation term applied to the
//   k and epsilon equations of the standard k-epsilon model.
//   Reference:
//   \verbatim
//     Henkes, R.A.W.M., Van Der Vlugt, F.F. & Hoogendoorn, C.J. (1991).
//     Natural Convection Flow in a Square Cavity Calculated with
//     Low-Reynolds-Number Turbulence Models.
//     Int. J. Heat Mass Transfer, 34, 1543-1557.
//   \endverbatim
//   This implementation is based on the density rather than temperature gradient
//   extending the applicability to systems in which the density gradient may be
//   generated by variation of composition rather than temperature.  Further, the
//   1/Prt coefficient is replaced by Cg to provide more general control of
//   model.
//   The default model coefficients are
//   \verbatim
//     buoyantKEpsilonCoeffs
//     {
//       Cg              1.0;
//     }
//   \endverbatim
// SeeAlso
//   mousse::RASModels::kEpsilon
// SourceFiles
//   buoyant_k_epsilon.cpp
#ifndef buoyant_k_epsilon_hpp_
#define buoyant_k_epsilon_hpp_
#include "k_epsilon.hpp"
namespace mousse
{
namespace RASModels
{
template<class BasicTurbulenceModel>
class buoyantKEpsilon
:
  public kEpsilon<BasicTurbulenceModel>
{
protected:
  // Protected data
    // Model coefficients
      dimensionedScalar Cg_;
  // Protected Member Functions
    tmp<volScalarField> Gcoef() const;
    virtual tmp<fvScalarMatrix> kSource() const;
    virtual tmp<fvScalarMatrix> epsilonSource() const;
public:
  typedef typename BasicTurbulenceModel::alphaField alphaField;
  typedef typename BasicTurbulenceModel::rhoField rhoField;
  typedef typename BasicTurbulenceModel::transportModel transportModel;
  //- Runtime type information
  TYPE_NAME("buoyantKEpsilon");
  // Constructors
    //- Construct from components
    buoyantKEpsilon
    (
      const alphaField& alpha,
      const rhoField& rho,
      const volVectorField& U,
      const surfaceScalarField& alphaRhoPhi,
      const surfaceScalarField& phi,
      const transportModel& transport,
      const word& propertiesName = turbulenceModel::propertiesName,
      const word& type = typeName
    );
    // Disallow default bitwise copy construct and assignment
    buoyantKEpsilon(const buoyantKEpsilon&) = delete;
    buoyantKEpsilon& operator=(const buoyantKEpsilon&) = delete;
  //- Destructor
  virtual ~buoyantKEpsilon()
  {}
  // Member Functions
    //- Re-read model coefficients if they have changed
    virtual bool read();
};
}  // namespace RASModels
}  // namespace mousse
#ifdef NoRepository
#   include "buoyant_k_epsilon.cpp"
#endif
#endif

#!/bin/sh
# mousse: CFD toolbox
# Copyright (C) 2011-2014 OpenFOAM Foundation
# Copyright (C) 2016 mousse project
#
# Script
#   mousse-new-case
#
# Description
#     Create a new case from a template for particular applications
#     - requires rsync

site_dir=${WM_PROJECT_SITE:-${WM_PROJECT_INST_DIR:-<unknown>}/site}
user_dir=$HOME/.mousse
version=${WM_PROJECT_VERSION:-unknown}
templateDir="app_templates"

#------------------------------------------------------------------------------
usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: ${0##*/} [OPTION]
options:
  -app <name>       specify the application to use
  -case <dir>       specify alternative case directory, default is the cwd
  -list             list the applications available
  -version <ver>    specify an alternative version (default: '$WM_PROJECT_VERSION')

clone initial application settings to the specified case from
    $user_dir/$template_dir/{$version,}/<APP>
    $site_dir/$template_dir/{$version,}/<APP>

USAGE
    exit 1
}

unset app_name case_name list_opt

# parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help | --help)
        usage
        ;;
    -app | --app)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        app_name="$2"
        shift 2
        ;;
    -case | --case)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        case_name="$2"
        shift 2
        ;;
    -l | -list | --list)
        list_opt=true
        shift
        ;;
    -v | -ver | -version | --version)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        version="$2"
        shift 2
        ;;
    -*)
        usage "unknown option: '$*'"
        ;;
    *)
        usage "unexpected argument: '$*'"
        ;;
    esac
done

# need rsync, except for when listing
type rsync >/dev/null 2>&1 || [ "$list_opt" = true ] || usage "Error: 'rsync' seems to be missing"


[ -n "$version" ] || {
    echo "Error: no -version specified and \$WM_PROJECT_VERSION is not set"
    exit 1
}

# find apps in current directory
# considered an app if it has constant/ and system/ directories
find_apps()
{
    for app in $(/bin/ls -d * 2>/dev/null)
    do
        [ -d "$app/constant" -a -d "$app/system" ] && echo $app
    done
}


app_list=$(
    for dir in $user_dir/$template_dir $site_dir/$template_dir
    do
        if cd $dir 2>/dev/null
        then
            find_apps
            cd $version 2>/dev/null && find_apps
        fi
    done | sort | uniq
)


list_apps()
{
    echo
    echo "applications available:"
    for i in $app_list
    do
        echo "    $i"
    done
    echo
}


if [ "$list_opt" = true ]
then
    list_apps
    exit 0
elif [ "$(echo $app_list | wc -w)" -eq 0 ]
then
    echo "Error: no applications available"
    exit 1
elif [ -z "$app_name" ]
then
    echo "Error: no -app specified"
    list_apps
    exit 1
fi

# get the corresponding src_dir name
src_dir=$(
    for dir in $user_dir/$template_dir $site_dir/$template_dir
    do
        if [ -d $dir ]
        then
            for app_dir in $dir/$version/$app_name $dir/$app_name
            do
                if [ -d $app_dir -a -d $app_dir/constant -a -d $app_dir/system ]
                then
                    echo "$app_dir"
                    break 2
                fi
            done
        fi
    done
)


[ -d "$src_dir" ] || {
    echo "Error: could not find template for $app_name"
    list_apps
    exit 1
}


# adjust for case_name as required
if [ -n "$case_name" ]
then
    [ -d "$case_name" ] || mkdir -p "$case_name"
    cd "$case_name" 2>/dev/null || usage "directory does not exist:  '$case_name'"
fi
new_dir=$PWD


[ -d "$new_dir" -a -w "$new_dir" ] || {
    echo "Error: target directory does not exist or is unwritable"
    echo "    $new_dir"
    exit 1
}

# add some useful subdirs:
mkdir -p $new_dir/postProcessing


echo "    application   $app_name"
echo "    source        $src_dir"
echo "    target        $new_dir"

echo "    syncing ..."
# sync updated files only, itemize changes so we know what is going on
rsync -aui $src_dir/ $new_dir


#
# reuse or create new MOUSSE_SETTINGS (useful for queuing systems)
#
if [ -e "$new_dir/MOUSSE_SETTINGS" ]
then
    echo "    retaining     MOUSSE_SETTINGS"
else
    echo "    creating      MOUSSE_SETTINGS"
    cat << SETTINGS > "$new_dir/MOUSSE_SETTINGS"
APPLICATION=$app_name
MOUSSE_VERSION=mousse-$version
SETTINGS
fi

echo Done
